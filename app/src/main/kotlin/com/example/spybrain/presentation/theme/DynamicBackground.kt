package com.example.spybrain.presentation.theme

import android.content.Context
import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.spybrain.R
import kotlinx.coroutines.delay
import java.util.Calendar
import java.util.concurrent.TimeUnit

/**
 * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
enum class TimeOfDay(val id: String) {
    MORNING("morning"),
    DAY("day"),
    EVENING("evening"),
    NIGHT("night");
    
    companion object {
        fun fromHour(hour: Int): TimeOfDay = when (hour) {
            in 5..11 -> MORNING
            in 12..16 -> DAY
            in 17..21 -> EVENING
            else -> NIGHT
        }
    }
}

/**
 * –î–∞–Ω–Ω—ã–µ –æ —Ñ–æ–Ω–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
data class TimeBasedBackground(
    val backgroundResId: Int,
    val gradientStart: Color,
    val gradientEnd: Color,
    val overlayStart: Color = Color.Black.copy(alpha = 0.5f),
    val overlayEnd: Color = Color.Black.copy(alpha = 0.1f),
    val isDark: Boolean = false
)

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ–Ω–∞–º–∏, –∑–∞–≤–∏—Å—è—â–∏–º–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
object DynamicBackgroundManager {
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∫ –¥–∞–Ω–Ω—ã–º –æ —Ñ–æ–Ω–µ
    val backgroundMap = mapOf(
        TimeOfDay.MORNING to TimeBasedBackground(
            R.drawable.bg_water,
            Color(0xFFF8E4B7),
            Color(0xFFE1C78F),
            Color.Black.copy(alpha = 0.3f),
            Color.Black.copy(alpha = 0.05f),
            false
        ),
        TimeOfDay.DAY to TimeBasedBackground(
            R.drawable.bg_nature,
            Color(0xFF88C1FF),
            Color(0xFF5D9CEB),
            Color.Black.copy(alpha = 0.3f),
            Color.Black.copy(alpha = 0.05f),
            false
        ),
        TimeOfDay.EVENING to TimeBasedBackground(
            R.drawable.bg_air,
            Color(0xFFFF9E80),
            Color(0xFFE57373),
            Color.Black.copy(alpha = 0.4f),
            Color.Black.copy(alpha = 0.1f),
            false
        ),
        TimeOfDay.NIGHT to TimeBasedBackground(
            R.drawable.bg_space,
            Color(0xFF3F51B5),
            Color(0xFF1A237E),
            Color.Black.copy(alpha = 0.6f),
            Color.Black.copy(alpha = 0.2f),
            true
        )
    )
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ–Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
     */
    fun getCurrentBackground(): TimeBasedBackground {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val timeOfDay = TimeOfDay.fromHour(hour)
        return backgroundMap[timeOfDay] ?: backgroundMap[TimeOfDay.DAY]!!
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
     */
    fun getWelcomeMessage(): String {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        return when (TimeOfDay.fromHour(hour)) {
            TimeOfDay.MORNING -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!"
            TimeOfDay.DAY -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!"
            TimeOfDay.EVENING -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"
            TimeOfDay.NIGHT -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏!"
        }
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    fun getMillisToNextChange(): Long {
        val calendar = Calendar.getInstance()
        val hour = calendar.get(Calendar.HOUR_OF_DAY)
        val minute = calendar.get(Calendar.MINUTE)
        val second = calendar.get(Calendar.SECOND)
        
        val nextChangeHour = when (hour) {
            in 0..4 -> 5  // –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ 5:00 (—É—Ç—Ä–æ)
            in 5..11 -> 12 // –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ 12:00 (–¥–µ–Ω—å)
            in 12..16 -> 17 // –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ 17:00 (–≤–µ—á–µ—Ä)
            in 17..21 -> 22 // –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ 22:00 (–Ω–æ—á—å)
            else -> 5 + 24 // –°–ª–µ–¥—É—é—â–∞—è —Å–º–µ–Ω–∞ –≤ 5:00 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        }
        
        val currentTimeSeconds = hour * 3600 + minute * 60 + second
        val nextChangeSeconds = (nextChangeHour % 24) * 3600
        
        val diffSeconds = if (nextChangeSeconds > currentTimeSeconds) {
            nextChangeSeconds - currentTimeSeconds
        } else {
            nextChangeSeconds + 24 * 3600 - currentTimeSeconds
        }
        
        return TimeUnit.SECONDS.toMillis(diffSeconds.toLong())
    }
}

/**
 * Composable —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ñ–æ–Ω–∞
 */
@Composable
fun DynamicBackground(
    modifier: Modifier = Modifier,
    content: @Composable () -> Unit
) {
    val context = LocalContext.current
    val timeOfDay = remember { getCurrentTimeOfDay() }
    val backgroundData = remember(timeOfDay) { getBackgroundForTimeOfDay(timeOfDay) }
    val greeting = remember(timeOfDay) { getGreetingForTimeOfDay(context, timeOfDay) }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    val infiniteTransition = rememberInfiniteTransition()
    val backgroundAlpha by infiniteTransition.animateFloat(
        initialValue = 0.7f,
        targetValue = 1.0f,
        animationSpec = infiniteRepeatable(
            animation = tween(8000, easing = LinearEasing),
            repeatMode = RepeatMode.Reverse
        )
    )
    
    Box(
        modifier = modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        backgroundData.gradientStart.copy(alpha = backgroundAlpha),
                        backgroundData.gradientEnd.copy(alpha = backgroundAlpha)
                    )
                )
            )
    ) {
        // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        Image(
            painter = painterResource(id = backgroundData.backgroundResId),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .alpha(0.3f),
            contentScale = ContentScale.Crop
        )
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        AnimatedVisibility(
            visible = true,
            enter = fadeIn() + slideInVertically(),
            modifier = Modifier.animateContentSize()
        ) {
            Text(
                text = greeting,
                style = MaterialTheme.typography.headlineMedium.copy(
                    fontWeight = FontWeight.Bold,
                    fontSize = 28.sp
                ),
                color = Color.White,
                textAlign = TextAlign.Center,
                modifier = Modifier
                    .align(Alignment.TopCenter)
                    .padding(top = 64.dp)
            )
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content()
    }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
 */
private fun getCurrentTimeOfDay(): TimeOfDay {
    val calendar = Calendar.getInstance()
    val hour = calendar.get(Calendar.HOUR_OF_DAY)
    return TimeOfDay.fromHour(hour)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ–Ω–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
private fun getBackgroundForTimeOfDay(timeOfDay: TimeOfDay): TimeBasedBackground {
    return DynamicBackgroundManager.backgroundMap[timeOfDay] 
        ?: DynamicBackgroundManager.backgroundMap[TimeOfDay.DAY]!!
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
private fun getGradientColorsForTimeOfDay(timeOfDay: TimeOfDay): List<Color> {
    val background = getBackgroundForTimeOfDay(timeOfDay)
    return listOf(background.gradientStart, background.gradientEnd)
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
 */
private fun getGreetingForTimeOfDay(context: Context, timeOfDay: TimeOfDay): String {
    return when (timeOfDay) {
        TimeOfDay.MORNING -> "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è"
        TimeOfDay.DAY -> "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üå§Ô∏è"
        TimeOfDay.EVENING -> "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåÖ"
        TimeOfDay.NIGHT -> "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô"
    }
} 